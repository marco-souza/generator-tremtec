import Component from './index';
import { startLoading, stopLoading } from './constants';
import { ActionType } from 'src/helpers/redux';

const mockedDispatch = jest.fn();
jest.mock('react-redux', () => ({
  useSelector: jest.fn(() => ({})),
  useDispatch: jest.fn(() => mockedDispatch),
}));
import methodToMock from 'react-redux';
const mockedMethod = methodToMock;

describe('redux/loading', () => {
  it('should have initial state', () => {
    expect(Object.entries(initialState).length).toBeTruthy();
  });

  it('reducer should return input if unknown action', () => {
    const action: ActionType = { type: 'UNKNOWN', payload: null };

    expect(reducer(initialState, action)).toBe(initialState);
  });

  it('reducer should change isLoading to true', () => {
    expect(initialState.isLoading).toBeFalsy();
    const newState = reducer(initialState, startLoading());
    expect(newState.isLoading).toBeTruthy();
  });

  it('reducer should keep isLoading as false', () => {
    expect(initialState.isLoading).toBeFalsy();
    const newState = reducer(initialState, stopLoading());
    expect(newState.isLoading).toBeFalsy();
  });

  it('hook should return state and actions', () => {
    const result = useLoading();
    const useSelectorMocked = mockedMethod.useSelector as jest.Mock;
    const useDispatchMocked = mockedMethod.useDispatch as jest.Mock;

    expect(result.actions).toBeTruthy();
    expect(result.state).toBeTruthy();

    expect(useSelectorMocked).toHaveBeenCalledTimes(1);
    expect(useDispatchMocked).toHaveBeenCalledTimes(1);
    expect(mockedDispatch).toHaveBeenCalledTimes(0);

    result.actions.startLoading();
    expect(mockedDispatch).toHaveBeenCalledTimes(1);
    result.actions.stopLoading();
    expect(mockedDispatch).toHaveBeenCalledTimes(2);
  });

  it('hook should return empty state', () => {
    const result = useLoading();

    expect(Object.entries(result.state)).toHaveLength(0);
  });

  it('hook should select "loading" key from store', () => {
    const result = useLoading();
    const useSelectorMocked = mockedMethod.useSelector as jest.Mock;
    const selectorFunction = useSelectorMocked.mock.calls[0][0];

    expect(selectorFunction({ loading: initialState })).toBe(initialState);
  });
});
